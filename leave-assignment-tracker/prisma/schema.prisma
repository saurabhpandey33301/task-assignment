// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name       String? 
  email     String  @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments Assignment[] // For TEACHER role: Assignments created by this user
  leaves      LeaveRequest[] // For STUDENT role: Leave requests submitted
  solutions   Solution[] // For STUDENT role: Solutions submitted
  schedules   Schedule[] // For TEACHER role: Schedules created by this user
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  solutions Solution[]
}

model Solution {
  id             String   @id @default(uuid())
  content        String
  submissionDate DateTime @default(now())
  studentId      String
  assignmentId   String
   grade     String?  // Add this line if missing

  feedback  String?
  student    User       @relation(fields: [studentId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveRequest {
  id        String      @id @default(uuid())
  studentId String
  reason    String
  startDate DateTime
  endDate   DateTime
  status    LeaveStatus
  student   User        @relation(fields: [studentId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Schedule {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  TEACHER
  STUDENT
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
